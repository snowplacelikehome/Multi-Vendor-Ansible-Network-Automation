---
# tasks file for pw_reset
- name: Remove all local user accounts and create a new one with a random, logged password
  tags:
    - pw_reset
  block:
    - name: run the user cleanup and new user tasks for devices with the true creds.reset variable
      block:
        #
        # First, create in idempotent/saved, random password and save existing credentials
        - name: Check if a password file already exists
          tags: pw_dry_run
          stat:
            path: "{{ 'pw/' + inventory_hostname + '.pw' }}"
          register: file_check_result

        - name: Vault decrypt .pw
          tags: pw_dry_run
          expect:
            command: "ansible-vault decrypt --ask-vault-pass {{ 'pw/' + inventory_hostname + '.pw' }}"
            responses:
              Vault password: "{{ backup_vault_secret }}"
          when: file_check_result.stat.exists

        - name: Create saved, idempotent, random password for each host
          tags: pw_dry_run
          ansible.builtin.set_fact:
            new_pass: "{{ lookup('ansible.builtin.password', 'pw/' + inventory_hostname + '.pw', length=16) }}"

        - name: Vault encrypt_string the new password to a variable using the same vault password provided through --ask-vault-pass
          tags: pw_dry_run
          expect:
            command: "sh -c 'ansible-vault encrypt_string --ask-vault-pass --stdin-name ansible_password < pw/{{ inventory_hostname }}.pw 2>/dev/null'"
            responses:
              New Vault password: "{{ pw.vault_pass }}"
              Confirm New Vault password: "{{ pw.vault_pass }}"
          register: vault_encrypt_result

        - name: Set the variable that the host_vars.j2 will use from the last 7 lines of the ansible-vault encrypt_string command
          tags: pw_dry_run
          ansible.builtin.set_fact:
            vault_encrypt_pass: "{{ vault_encrypt_result.stdout_lines[2] }}\n{{ vault_encrypt_result.stdout_lines[3] }}\n{{ vault_encrypt_result.stdout_lines[4] }}\n{{ vault_encrypt_result.stdout_lines[5] }}\n{{ vault_encrypt_result.stdout_lines[6] }}\n{{ vault_encrypt_result.stdout_lines[7] }}\n{{ vault_encrypt_result.stdout_lines[8] }}\n"

        - name: Add host_vars/inventory_hostname file with ansible_user and ansible-vault encrypted ansible_password variables
          tags: pw_dry_run
          template:
            src: host_vars.j2
            dest: "host_vars/{{ inventory_hostname }}.yml"
            owner: jkm
            group: jkm
            mode: '0640'

        - name: Vault encrypt .pw file
          tags: pw_dry_run
          expect:
            command: "ansible-vault encrypt --ask-vault-pass {{ 'pw/' + inventory_hostname + '.pw' }}"
            responses:
              New Vault password: "{{ backup_vault_secret }}"
              Confirm New Vault password: "{{ backup_vault_secret }}"

        - name: print the password
          tags: pw_dry_run
          ansible.builtin.debug:
            var: new_pass
          when: "'debug' in ansible_run_tags"

        # Now, log all the existing local creds
        - name: Capture show creds command output
          tags: pw_dry_run
          ansible.netcommon.cli_command:
            command: "/user export terse"
          register: config_output

        - name: Print the config's existing creds
          tags: pw_dry_run
          ansible.builtin.debug:
            msg: "Current creds: {{ config_output.stdout | regex_findall('(?m)^/user add .*') | to_nice_json }}"
          when: "'debug' in ansible_run_tags"

        - name: Log the config_output's creds to a file
          tags: pw_dry_run
          ansible.builtin.copy:
            backup: true
            mode: "0640"
            content: "{{ config_output.stdout | regex_findall('(?m)^/user add .*') | to_nice_json }}"
            dest: "{{ 'creds/' + inventory_hostname + '.creds' }}"
          changed_when: false

        - name: Vault encrypt .creds file
          tags: pw_dry_run
          expect:
            command: "ansible-vault encrypt --ask-vault-pass {{ 'creds/' + inventory_hostname + '.creds' }}"
            responses:
              New Vault password: "{{ backup_vault_secret }}"
              Confirm New Vault password: "{{ backup_vault_secret }}"

        # Next, create commands to either reset an existing user, otherwise add a new one, with the generated password
        - name: Initialize commands for user reset
          tags: pw_dry_run
          ansible.builtin.set_fact:
            pw_set_command: ""
            pw_add_command: ""

        - name: Build a `set` command for when there is an existing user
          tags: pw_dry_run
          ansible.builtin.set_fact:
            pw_set_command: "/user set [find where name={{ pw.user }}] group=full"
          when: config_output.stdout | regex_findall("(?m)/user add .*name=" + pw.user + "(\s|$)")|length > 0

        - name: Build an `add` command when user doesn't exist
          tags: pw_dry_run
          ansible.builtin.set_fact:
            pw_add_command: "/user add group=full name={{ pw.user }}"
          when: pw_set_command|length == 0

        #
        # Now, add or reset the new user and password and remove any others
        - name: Build list of reset or new user/pass configuration commands
          tags: pw_dry_run
          ansible.builtin.set_fact:
            pw_config_commands:
              - "{{ pw_set_command }}{{ pw_add_command }} password={{ new_pass }}"
              - "/user remove [find where name!={{ pw.user }}]"

        - name: List all of the user cleanup and new user configuration commands that would be pushed
          tags: pw_dry_run
          ansible.builtin.debug:
            msg: "{{ item }}"
          loop: "{{ pw_config_commands }}"
          when: "'debug' in ansible_run_tags"

        - name: Push the user cleanup and new user configuration
          ansible.netcommon.cli_command:
            command: "{{ item }}"
          loop: "{{ pw_config_commands }}"
          register: command_output
          changed_when: command_output.stdout|length <= 0

        - name: Show Debug command_output variable
          ansible.builtin.debug:
            msg: '{{ command_output }}'
          when: "'debug' in ansible_run_tags"

        - name: Check for Failutres in the Command Loop Output
          ansible.builtin.fail:
            msg: "The command ({{ item.item }}) did not have an empty response"
          when: item.stdout|length > 0
          loop: '{{ command_output.results }}'

        # - name: Save Password Reset Configuration
        #   ansible.netcommon.cli_command:
        #     command: "copy running-config startup-config"
        #   register: save_output
        #   failed_when: "'Copy succeeded' not in save_output.stdout"

      when: pw.reset

    - name: List the hosts skipped by false pw.reset
      block:
        - name: Print the hosts that are skipped
          ansible.builtin.debug:
            msg: "Skipped: {{ inventory_hostname }}"
      when: not pw.reset
