---
# tasks file for pw_reset
- name: Remove all local user accounts and create a new one with a random, logged password
  tags:
    - pw_reset
  block:
    - name: run the user cleanup and new user tasks for devices with the true creds.reset variable
      block:
        # First, create in idempotent/saved, random password and save existing credentials
        - name: Check if a password file already exists
          tags: pw_dry_run
          stat:
            path: "{{ 'pw/' + inventory_hostname + '.pw' }}"
          register: file_check_result

        - name: Vault decrypt .pw
          tags: pw_dry_run
          expect:
            command: "ansible-vault decrypt --ask-vault-pass {{ 'pw/' + inventory_hostname + '.pw' }}"
            responses:
              Vault password: "{{ backup_vault_secret }}"
          when: file_check_result.stat.exists

        - name: Create saved, idempotent, random password for each host
          tags: pw_dry_run
          ansible.builtin.set_fact:
            new_pass: "{{ lookup('ansible.builtin.password', 'pw/' + inventory_hostname + '.pw', length=16) }}"

        #
        # Add new credentials to a host_vars/[invnetory_hostname].yml file
        #
        - name: Add new credentials to a host_vars/[invnetory_hostname].yml files with the vault encrypted password
          tags: make_host_vars
          block:
            - name: Vault encrypt_string the new password to a variable using the same vault password provided through --ask-vault-pass
              tags: pw_dry_run
              expect:
                command: "sh -c 'tr -d \"\\n\" < pw/{{ inventory_hostname }}.pw | ansible-vault encrypt_string --ask-vault-pass --stdin-name ansible_password 2>/dev/null'"
                responses:
                  New Vault password: "{{ pw.vault_pass }}"
                  Confirm New Vault password: "{{ pw.vault_pass }}"
              register: vault_encrypt_result

            - name: Set the variable that the host_vars.j2 will use from the last 7 lines of the ansible-vault encrypt_string command
              tags: pw_dry_run
              ansible.builtin.set_fact:
                # The first two lines of stdout_lines will be the prompts for the vault password and a blank line, so 
                # just get the lines starting with 'ansible_password'
                vault_encrypt_pass: "{% set ns = namespace(start=false) %}{% for line in vault_encrypt_result.stdout_lines %}{% if ns.start or 'ansible_password' in line %}{% set ns.start = true %}{{line}}\n{% endif %}{% endfor %}"
                #vault_encrypt_pass: "{{ vault_encrypt_result.stdout_lines[2] }}\n{{ vault_encrypt_result.stdout_lines[3] }}\n{{ vault_encrypt_result.stdout_lines[4] }}\n{{ vault_encrypt_result.stdout_lines[5] }}\n{{ vault_encrypt_result.stdout_lines[6] }}\n{{ vault_encrypt_result.stdout_lines[7] }}\n{{ vault_encrypt_result.stdout_lines[8] }}\n"

            #
            # Create a host_vars file for this ansible_host with the src_ip variable
            # First, check if a host_vars file already exists
            - name: Check if a host_vars file already exists
              tags: pw_dry_run
              ansible.builtin.stat:
                path: "host_vars/{{ inventory_hostname }}.yml"
              register: host_vars_check_result

            - name: Edit the existing host_vars file to reset the ansible_user and encrypted ansible_password to their new values
              tags: pw_dry_run
              block:
                - name: Replace ansible_user variable with the new value
                  ansible.builtin.lineinfile:
                    path: "host_vars/{{ inventory_hostname }}.yml"
                    regex: '^ansible_user:'
                    line: "ansible_user: {{ pw.user }}"

                - name: Comment out old ansible_password
                  ansible.builtin.replace:
                    path: "host_vars/{{ inventory_hostname }}.yml"
                    after: '[#\s]*ansible_password: [^\n]*'
                    regexp: '^(.+)$'
                    replace: '# \1'

                - name: Replace ansible_password variable with the new value
                  ansible.builtin.lineinfile:
                    path: "host_vars/{{ inventory_hostname }}.yml"
                    regex: '^#*ansible_password:'
                    line: "{{ vault_encrypt_pass }}"
                    mode: '0640'

              when: host_vars_check_result.stat.exists

            - name: Add a new hosts_vars file with the new ansible_user and encrypted ansible_password values
              tags: pw_dry_run
              block:
                - name: Add host_vars/inventory_hostname file with ansible_user and ansible-vault encrypted ansible_password variables
                  ansible.builtin.template:
                    src: host_vars.j2
                    dest: "host_vars/{{ inventory_hostname }}.yml"
                    mode: '0640'

              when: not host_vars_check_result.stat.exists

        #
        # vault encrypt the pw/[inventory_hostname].pw file
        #
        - name: Vault encrypt .pw file
          tags: pw_dry_run
          expect:
            command: "ansible-vault encrypt --ask-vault-pass {{ 'pw/' + inventory_hostname + '.pw' }}"
            responses:
              New Vault password: "{{ backup_vault_secret }}"
              Confirm New Vault password: "{{ backup_vault_secret }}"

        - name: print the password
          ansible.builtin.debug:
            var: new_pass
          when: "'debug' in ansible_run_tags"

        #
        # Capture the current credential hashes from the device configs and save
        # them in pw/[inventory_hostname].creds files
        #
        - name: Capture show configuration output for creds collection
          tags: pw_dry_run
          junipernetworks.junos.junos_command:
            commands:
              - "show configuration"
            display: set
          register: config_output

        ##NOTE: this should repeate for "system root-authentication encrypted-password .*"
        - name: Print the config's existing creds
          tags: pw_dry_run
          ansible.builtin.debug:
            # find 'system root-authentication encrypte-password ".*"' or 'system login user [USER] authentication encrypte-password ".*"'
            # uses (?:) for a non-capturing group, otherwise findall only returns the stuff inside the () capturing group
            msg: "Current creds: {{ config_output.stdout | regex_findall('(?m)system (?:root-|login user [\\w\\.-]+ )authentication encrypted-password \"[^\"]*\"') | to_nice_json }}"
          when: "'debug' in ansible_run_tags"

        - name: Log the config_output's creds to a file
          tags: pw_dry_run
          ansible.builtin.copy:
            backup: true
            mode: "0640"
            content: "{{ config_output.stdout | regex_findall('(?m)system (?:root-|login user [\\w\\.-]+ )authentication encrypted-password \"[^\"]*\"') | to_nice_json }}"
            dest: "{{ 'creds/' + inventory_hostname + '.creds' }}"
          changed_when: false

        - name: Vault encrypt .creds file
          tags: pw_dry_run
          expect:
            command: "ansible-vault encrypt --ask-vault-pass {{ 'creds/' + inventory_hostname + '.creds' }}"
            responses:
              New Vault password: "{{ backup_vault_secret }}"
              Confirm New Vault password: "{{ backup_vault_secret }}"

        #
        # Connect to the devices, remove all users except the pw.user and remote-* user templates and reset pw.user's
        # password to tne new creds
        #

        # junos_user aggregate is expecting use names in this format:
        #   - name: admin
        #   - name: remote-admin
        - name: Combine pw.user and aaa_user_templates into one hash array
          tags: pw_dry_run
          ansible.builtin.set_fact:
            agg_user_name: >-
              {%- set names = [ { 'name': pw.user } ] -%} 
              {%- for t in aaa_user_templates -%}
              {{ names.append( { 'name': t.name } ) }}
              {%- endfor -%}
              {{ names }}  

        - name: Remove all users except the pw.user and the remote-* templates
          junipernetworks.junos.junos_user:
            aggregate: "{{ agg_user_name }}"
            #aggregate:
            #  - name: "{{ pw.user }}"
            #  - name: remote-admin
            #  - name: remote-operator
            #  - name: remote-read-only
            purge: true

        # root user is not supported yet: https://github.com/ansible-collections/junipernetworks.junos/issues/144
        #- name: Reset the root password
        #  junipernetworks.junos.junos_user:
        #    name: root
        #    encrypted_password: "{{ new_pass | password_hash('sha512') }}"
        #    state: present

        - name: generate an XML from the root password reset template
          tags: pw_dry_run
          ansible.builtin.template:
            src: root_pw.j2
            dest: pw/root_pw.xml
            #owner: ubuntu
            #group: ubuntu
            mode: '0640'

        - name: Load XML config to reset the root password
          junipernetworks.junos.junos_config:
            src: pw/root_pw.xml
            src_format: xml
          register: config_result
          notify: Remove the root_pw XML file

        # Have to do this last because, if ansible_user is a local user, this playbook won't be
        # able to reconnect to run any other plays
        - name: Reset the pw.user password
          junipernetworks.junos.junos_user:
            name: "{{ pw.user }}"
            role: super-user
            encrypted_password: "{{ new_pass | password_hash('sha512') }}"
            state: present

#        ### if it was necessary to build commands to remove any previously configured local users
#        - name: Create a JunOS encrypted-password
#          tags: pw_dry_run
#          ansible.builtin.set_fact:
#            new_encrypted_pass: "{{ new_pass | password_hash('sha512') }}"
#
#        - name: Build set of local user cleanup commands
#          tags: pw_dry_run
#          ansible.builtin.set_fact:
#            # the regex_findall will collect just the portion of the lines from the device's config to use in the remove command
#            # the regex_replace will match the reusable portion of the regex_findall and use the substitution to build the removal command
#            pw_clear_commands: "{{ config_output.stdout | regex_findall('(?m)system login user [\\w\\.-]+ authentication encrypted-password') | regex_replace('(?m)(system login user [\\w\\.-]+)', 'delete \\1') }}"
#
#        - name: Build set of new user/pass configuration commands
#          tags: pw_dry_run
#          ansible.builtin.set_fact:
#            pw_config_commands:
#              - "username {{ pw.user }} password {{ new_pass }} privilege 15"
#              - "set system login user {{ pw.user }} uid 2000"
#              - "set system login user {{ pw.user }} class super-user"
#              - "set system login user {{ pw.user }} authentication encrypted-password \"{{ new_encrypted_pass }}\""
#              - "set system login user root authentication encrypted-password \"{{ new_encrypted_pass }}\""
#
#
#        - name: List all of the user cleanup and new user configuration commands that would be pushed
#          tags: pw_dry_run
#          ansible.builtin.debug:
#            msg: "{{ item }}"
#          loop: "{{ [ 'configure terminal' ] + pw_clear_commands + pw_config_commands + [ 'exit' ] }}"
#          when: "'debug' in ansible_run_tags"
#
#        - name: Push the user cleanup and new user configuration
#          ansible.netcommon.cli_command:
#            command: "{{ item }}"
#          loop: "{{ [ 'configure terminal' ] + pw_clear_commands + pw_config_commands + [ 'exit' ] }}"
#          register: command_output
#          changed_when: command_output.stdout|length <= 0
#
#        - name: Show Debug command_output variable
#          ansible.builtin.debug:
#            msg: '{{ command_output }}'
#          when: "'debug' in ansible_run_tags"
#
#        - name: Check for Failutres in the Command Loop Output
#          ansible.builtin.fail:
#            msg: "The command ({{ item.item }}) did not have an empty response"
#          when: item.stdout|length > 0
#          loop: '{{ command_output.results }}'
#
#        - name: Save Password Reset Configuration
#          ansible.netcommon.cli_command:
#            command: "copy running-config startup-config"
#          register: save_output
#          failed_when: "'Copy succeeded' not in save_output.stdout"

      when: pw.reset

    - name: List the hosts skipped by false pw.reset
      block:
        - name: Print the hosts that are skipped
          ansible.builtin.debug:
            msg: "Skipped: {{ inventory_hostname }}"
      when: not pw.reset
